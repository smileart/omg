alias r='reset'

alias findpid="ps axww -o pid,user,%cpu,%mem,start,time,command | fzy | sed 's/^ *//' | cut -f1 -d' '"

if [[ "$OSTYPE" == "linux"* ]]; then
  alias ack='ack-grep'
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  alias offline='networksetup -setairportpower en1 off'
  alias online='networksetup -setairportpower en1 on'
fi

alias ccat='pygmentize -O style=monokai -f console256 -g'

function b.system.random32() {
  echo `LC_ALL=C tr -dc A-Za-z0-9_\!\@\#\$\%\^\&\*\(\)-+= < /dev/urandom | fold -w 32 | head -n 1`
}

function whiteboard() {
  convert "$1" -morphology Convolve DoG:15,100,0 -negate -normalize -blur 0x1 -channel RBG -level 60%,91%,0.1 "$2"
}

function b.system.random32_alphanum() {
  cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1
}

function random_mac() {
  echo -n 00-60-2F; dd bs=1 count=3 if=/dev/random 2>/dev/null |hexdump -v -e '/1 "-%02X"'
}

if [[ "$OSTYPE" == "darwin"* ]]; then
  function spoof_mac() {
    sudo ifconfig en0 ether $(random_mac)
    sudo scutil --set HostName $(b.system.random32_alphanum)
  }
fi

function add_pair_user {

  username=$1
  password=$(b.system.random32)

  if [[ "$OSTYPE" == "darwin"* ]]; then

    echo "Added user: $username"
    echo "User password: $password"
    echo

    cd /

    sudo dscl . -create /Users/$username
    sudo dscl . -create /Users/$username UserShell /bin/bash
    sudo dscl . -create /Users/$username RealName "$username"
    sudo dscl . -create /Users/$username UniqueID $RANDOM
    sudo dscl . -create /Users/$username PrimaryGroupID 53 #console users
    sudo dscl . -create /Users/$username NFSHomeDirectory /Users/$username
    sudo mkdir -p /Users/$username/.ssh
    sudo dscl . -passwd /Users/$username $password
    echo 'wemux mirror; exit' | sudo tee -a "/Users/$username/".bash_profile
    sudo chown -R $username /Users/$username
    sudo chgrp -R 53 /Users/$username
    sudo dseditgroup -o edit -a $username -t user com.apple.access_ssh
  elif [[ "$OSTYPE" == "linux"* ]]; then
    echo "User to add: $username"
    echo "Recommended password: $password"
    echo

    cd /

    echo
    sudo adduser "$username"
    echo 'wemux mirror; exit' | sudo tee -a "/home/$username/".bash_profile
    sudo sed -i "/host_list/c\host_list=\($(whoami)\)" /usr/local/etc/wemux.conf
  fi
}

function delete_pair_user {
  username=$1
  echo "Deleted user $username"

  if [[ "$OSTYPE" == "darwin"* ]]; then
    sudo rm -rf /Users/$username
    sudo dseditgroup -o edit -d $username -t user com.apple.access_ssh
    sudo dscl . -delete /Users/$username
  elif [[ "$OSTYPE" == "linux"* ]]; then
    sudo userdel $username
    sudo rm -rf /home/$username
  fi
}

function disk_list {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    diskutil list
  elif [[ "$OSTYPE" == "linux"* ]]; then
    sudo lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,LABEL
  fi
}

function ext_ip {
  curl ipecho.net/plain ; echo
}

function lan_ip {
  nic0="en0"
  nic1="en1"

  # Get wired lan IP.
  lan_ip=$(/sbin/ifconfig $nic0 2>/dev/null | grep 'inet ' | awk '{print $2}')

  # If no wired lan, get wireless lan IP.
  if [ -z "$lan_ip" ]; then
    lan_ip=$(/sbin/ifconfig $nic1 2>/dev/null | grep 'inet ' | awk '{print $2}')
  fi

  # If still nothing, try Ubuntu way
  if [ -z "$lan_ip" ]; then
    lan_ip=$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')
  fi

  # If still nothing, try Raspbian/CentOS way
  if [ -z "$lan_ip" ]; then
    lan_ip=$(ip a | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')
  fi

  if [ -n "$lan_ip" ]; then
    echo $lan_ip
  fi
}

function list_ports {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    lsof -i | grep LISTEN
  elif [[ "$OSTYPE" == "linux"* ]]; then
    netstat -nlp
  fi
}

function sys_info {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    sw_vers; sysctl -n machdep.cpu.brand_string; system_profiler | more
  elif [[ "$OSTYPE" == "linux"* ]]; then
    lsb_release -a; uname -r; cat /proc/version; cat /proc/meminfo | more; cat /proc/cpuinfo | more; lshw | more
  fi
}

function black_n_white {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    sed -E "s/"$'\E'"\[([0-9]{1,2}(;[0-9]{1,2})*)?m//g"
  elif [[ "$OSTYPE" == "linux"* ]]; then
    sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})*)?m//g"
  fi
}

function hl {
  if [ ! -z $1 ]; then
    pbpaste | pygmentize -f rtf -O style=default -l $1 | pbcopy
  else
    echo 'Usage: highlight ruby # having ruby code in the clipboard'
  fi
}

function mov2gif {
  filename=$(basename "$1")
  filename="${filename%.*}"

  ffmpeg -i $1 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $filename.gif
}

function transfer {
    # write to output to tmpfile because of progress bar
    tmpfile=$( mktemp -t transferXXX )
    curl --progress-bar --upload-file $1 https://transfer.sh/$(basename $1) >> $tmpfile;
    cat $tmpfile;
    rm -f $tmpfile;
}

# Check if command was finished successfully
#
# $1 — any shell command
function command_succes {
  command $1 >/dev/null 2>&1 && return 0 # true
  return 1 # false
}

function rpi_ip {
  arp -na | pru 'self.scan(/(?:\()(.*)(?:\).*b8:27:eb)/)[0]'
}

# https://github.com/paoloantinori/hhighlighter
#
# DESCRIPTION:
#   * h highlights with color specified keywords when you invoke it via pipe
#   * h is just a tiny wrapper around the powerful 'ack' (or 'ack-grep'). you need 'ack' installed to use h. ack website: http://beyondgrep.com/
# TEST ME:
#   * try to invoke:
#     echo "abcdefghijklmnopqrstuvxywz" | h   a b c d e f g h i j k l
# CONFIGURATION:
#   * you can alter the color and style of the highlighted tokens setting values to these 2 environment values following "Perl's Term::ANSIColor" supported syntax
#   * ex.
#     export H_COLORS_FG="bold black on_rgb520","bold red on_rgb025"
#     export H_COLORS_BG="underline bold rgb520","underline bold rgb025"
#     echo abcdefghi | h   a b c d
# GITHUB
#   * https://github.com/paoloantinori/hhighlighter

# Check for the ack command
if command_succes 'ack --version'; then
  h() {

      _usage() {
          echo "usage: YOUR_COMMAND | h [-idn] args...
      -i : ignore case
      -d : disable regexp
      -n : invert colors"
      }

      local _OPTS

      # detect pipe or tty
      if [[ -t 0 ]]; then
          _usage
          return
      fi

      # manage flags
      while getopts ":idnQ" opt; do
          case $opt in
              i) _OPTS+=" -i " ;;
              d)  _OPTS+=" -Q " ;;
              n) n_flag=true ;;
              Q)  _OPTS+=" -Q " ;;
                  # let's keep hidden compatibility with -Q for original ack users
              \?) _usage
                  return ;;
          esac
      done

      shift $(($OPTIND - 1))

      # set zsh compatibility
      [[ -n $ZSH_VERSION ]] && setopt localoptions && setopt ksharrays && setopt ignorebraces

      local _i=0

      if [[ -n $H_COLORS_FG ]]; then
          local _CSV="$H_COLORS_FG"
          local OLD_IFS="$IFS"
          IFS=','
          local _COLORS_FG=()
          for entry in $_CSV; do
            _COLORS_FG=("${_COLORS_FG[@]}" "$entry")
          done
          IFS="$OLD_IFS"
      else
          _COLORS_FG=(
                  "underline bold red" \
                  "underline bold green" \
                  "underline bold yellow" \
                  "underline bold blue" \
                  "underline bold magenta" \
                  "underline bold cyan"
                  )
      fi

      if [[ -n $H_COLORS_BG ]]; then
          local _CSV="$H_COLORS_BG"
          local OLD_IFS="$IFS"
          IFS=','
          local _COLORS_BG=()
          for entry in $_CSV; do
            _COLORS_BG=("${_COLORS_BG[@]}" "$entry")
          done
          IFS="$OLD_IFS"
      else
          _COLORS_BG=(
                  "bold on_red" \
                  "bold on_green" \
                  "bold black on_yellow" \
                  "bold on_blue" \
                  "bold on_magenta" \
                  "bold on_cyan" \
                  "bold black on_white"
                  )
      fi

      if [[ -z $n_flag ]]; then
          #inverted-colors-last scheme
          _COLORS=("${_COLORS_FG[@]}" "${_COLORS_BG[@]}")
      else
          #inverted-colors-first scheme
          _COLORS=("${_COLORS_BG[@]}" "${_COLORS_FG[@]}")
      fi

      if [[ "$#" -gt ${#_COLORS[@]} ]]; then
          echo "You have passed to hhighlighter more keywords to search than the number of configured colors.
  Check the content of your H_COLORS_FG and H_COLORS_BG environment variables or unset them to use default 12 defined colors."
          return 1
      fi

      if [ -n "$ZSH_VERSION" ]; then
         local WHICH="whence"
      else [ -n "$BASH_VERSION" ]
         local WHICH="type -P"
      fi

      if ! ACKGREP_LOC="$($WHICH ack-grep)" || [ -z "$ACKGREP_LOC" ]; then
          if ! ACK_LOC="$($WHICH ack)" || [ -z "$ACK_LOC" ]; then
              echo "ERROR: Could not find the ack or ack-grep commands"
              return 1
          else
              local ACK=$($WHICH ack)
          fi
      else
          local ACK=$($WHICH ack-grep)
      fi

      # build the filtering command
      for keyword in "$@"
      do
          local _COMMAND=$_COMMAND"$ACK $_OPTS --noenv --flush --passthru --color --color-match=\"${_COLORS[$_i]}\" '$keyword' |"
          _i=$_i+1
      done
      #trim ending pipe
      _COMMAND=${_COMMAND%?}
      #echo "$_COMMAND"
      cat - | eval $_COMMAND
  }
fi

# Weather in the CLI
# Follow updates from author: https://twitter.com/igor_chubin
#                             https://github.com/chubin/wttr.in
function wttr {
  place=$1
  lang=$2

  if [ -z $2 ]; then
    curl "wttr.in/$1"
  else
    curl "wttr.in/$1?lang=$2"
  fi
}

# Run TinTin++ with basic settings without a config file
#
# $1 — session
# $2 — server
# $3 — port
#
# e.g.: tt discworld discworld.starturtle.net 4242
function tt {
  tt++ -e "#split; #session $1 $2 $3; #config mccp on; #config wordwrap off;"
}
